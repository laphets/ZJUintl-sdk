{"version":3,"sources":["../src/zju_intl.js"],"names":["PROTO_PATH","__dirname","grpc","require","protoDescriptor","load","zjuintl","client","ZJUintl","serviceURL","credentials","createInsecure","connectTest","name","url","Promise","resolve","reject","status","connect_test","err","response","error","getCourse","user","username","password","getBBGradeList","getBBCertainGrade","courseid","module","exports"],"mappings":"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","file":"zju_intl.js","sourcesContent":["/*\n * @Author: Laphets \n * @Date: 2018-04-27 22:19:46 \n * @Last Modified by: Laphets\n * @Last Modified time: 2018-04-27 23:27:47\n */\n\n\nconst PROTO_PATH = __dirname + '/protos/zju_intl.proto';\nconst grpc = require('grpc');\n\nlet protoDescriptor = grpc.load(PROTO_PATH);\nlet zjuintl = protoDescriptor.zjuintl;\n\nlet client = new zjuintl.ZJUintl(require('./config').serviceURL, grpc.credentials.createInsecure());\n\n/**\n * connectTest\n * @param {string} name name for connectTest\n * @param {string} url URL for our gprc service\n */\nconst connectTest = (name, url = require('./config').serviceURL) => {\n    return new Promise((resolve, reject) => {\n        if (!name) {\n            reject({\n                status: 'PARAMERROR'\n            });\n        } else {\n            client.connect_test({name}, (err, response) => {\n                if (err) {\n                    reject({\n                        status: 'CLIENTERROR',\n                        error: err\n                    });\n                } else {\n                    resolve(response);\n                }\n            });\n        }\n    })\n}\n\n/**\n * getCourse(timetable)\n * @param {Object} user user information includes username and password\n * @param {string} url url of our grpc service\n */\nconst getCourse = (user, url = require('./config').serviceURL) => {\n    return new Promise((resolve, reject) => {\n        client.getCourse({ username: user.username, password: user.password }, (err, response) => {\n            if (err) {\n                reject({\n                    status: 'CLIENTERROR',\n                    error: err\n                });\n            } else {\n                resolve(response);\n            }\n        })\n    })\n}\n\n/**\n * getBBGradeList\n * @param {Object} user user information includes username and password\n * @param {String} url url of our grpc service\n */\nconst getBBGradeList = (user, url = require('./config').serviceURL) => {\n    return new Promise((resolve, reject) => {\n        client.getBBGradeList({ username: user.username, password: user.password }, (err, response) => {\n            if (err) {\n                reject({\n                    status: 'CLIENTERROR',\n                    error: err\n                });\n            } else {\n                resolve(response);\n            }\n        });\n    })\n}\n\n/**\n * getBBCertainGrade - get grade for a certain course\n * @param {Object} user user information includes username, password and courseid\n * @param {String} url url of our grpc service\n */\nconst getBBCertainGrade = (user, url = require('./config').serviceURL) => {\n    return new Promise((resolve, reject) => {\n        client.getBBCertainGrade({ username: user.username, password: user.password, courseid: user.courseid }, (err, response) => {\n            if (err) {\n                reject({\n                    status: 'CLIENTERROR',\n                    error: err\n                });\n            } else {\n                resolve(response);\n            }\n        })\n    })\n}\n\nmodule.exports = {\n    connectTest,\n    getCourse,\n    getBBGradeList,\n    getBBCertainGrade\n}"]}